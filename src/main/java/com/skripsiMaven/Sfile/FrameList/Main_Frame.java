/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.skripsiMaven.Sfile.FrameList;

import com.skripsiMaven.Sfile.Script.Export_Script;
import com.skripsiMaven.Sfile.Script.Options_Script;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TooManyListenersException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;

/**
 *
 * @author alexa
 */
public class Main_Frame extends javax.swing.JFrame {

    private int sum_pictures = 0;
    int xMouseInDeskTopBackground;
    int yMouseInDeskTopBackground;
    int x2;
    int y2;

    int xImage_POS;
    int yImage_POS;
    JFileChooser chooser;
    String choosertitle;

    double Coor_ScaleX = 1.55;
    double Coor_ScaleY = 3.65;
    private String path_local = "src/images/";
    JLabel jlabels[] = new JLabel[10];
    String[] jlabels_coordinat = new String[10];

    List<Map<String, Integer>> List_jlabels_stat = new ArrayList<Map<String, Integer>>();
    List<Map<String, File>> List_jlabels_stat_base = new ArrayList<Map<String, File>>();
//    String[] jlabels_stat = new String[10];
    JOptionPane alertBox = new JOptionPane();

    /**
     * Creates new form TestLayout
     */
    public Main_Frame() {
        initComponents();
        setResizable(false);
        customInit();
//        setUndecorated(true);
//        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        drop_zone_panel = new DropPane();
        Label_Drop_Image = new javax.swing.JLabel();
        IMG_OPTIONS = new javax.swing.JPanel();
        RESIZE_LABEL = new javax.swing.JLabel();
        Change_Color_Label = new javax.swing.JLabel();
        Jlabel_OPTIONS_ID = new javax.swing.JLabel();
        SETWIDTH_HEIGHT_DIALOG = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        SET_WIDTH_INPUT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        SET_HEIGHT_INPUT = new javax.swing.JTextField();
        RESIZE_ID = new javax.swing.JLabel();
        SAVE_W_H_LABEL = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        EXIT_APP = new javax.swing.JLabel();
        checkCustomPath = new javax.swing.JToggleButton();
        Choose_File_Panel = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1200, 800));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        drop_zone_panel.setBackground(new java.awt.Color(255, 255, 255));
        drop_zone_panel.setMaximumSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.setMinimumSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.setPreferredSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drop_zone_panelMouseDragged(evt);
            }
        });
        drop_zone_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drop_zone_panelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drop_zone_panelMousePressed(evt);
            }
        });
        drop_zone_panel.setLayout(null);

        Label_Drop_Image.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        Label_Drop_Image.setForeground(new java.awt.Color(0, 0, 0));
        Label_Drop_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Drop_Image.setText("Drop an Image");
        drop_zone_panel.add(Label_Drop_Image);
        Label_Drop_Image.setBounds(360, 400, 460, 60);

        IMG_OPTIONS.setBackground(new java.awt.Color(27, 38, 44));
        IMG_OPTIONS.setMaximumSize(new java.awt.Dimension(120, 140));

        RESIZE_LABEL.setForeground(new java.awt.Color(187, 225, 250));
        RESIZE_LABEL.setText("Resize");
        RESIZE_LABEL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RESIZE_LABELMouseClicked(evt);
            }
        });

        Change_Color_Label.setForeground(new java.awt.Color(187, 225, 250));
        Change_Color_Label.setText("Change Color");
        Change_Color_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Change_Color_LabelMouseClicked(evt);
            }
        });

        Jlabel_OPTIONS_ID.setText("jlabelID");

        javax.swing.GroupLayout IMG_OPTIONSLayout = new javax.swing.GroupLayout(IMG_OPTIONS);
        IMG_OPTIONS.setLayout(IMG_OPTIONSLayout);
        IMG_OPTIONSLayout.setHorizontalGroup(
            IMG_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IMG_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IMG_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Change_Color_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(RESIZE_LABEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Jlabel_OPTIONS_ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        IMG_OPTIONSLayout.setVerticalGroup(
            IMG_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IMG_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RESIZE_LABEL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Change_Color_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(Jlabel_OPTIONS_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        drop_zone_panel.add(IMG_OPTIONS);
        IMG_OPTIONS.setBounds(860, 230, 120, 140);
        IMG_OPTIONS.setVisible(false);

        SETWIDTH_HEIGHT_DIALOG.setBackground(new java.awt.Color(27, 38, 44));
        SETWIDTH_HEIGHT_DIALOG.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.white, null, null));

        jLabel2.setForeground(new java.awt.Color(187, 225, 250));
        jLabel2.setText("Set Width :");

        jPanel1.setBackground(new java.awt.Color(15, 76, 117));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(187, 225, 250));
        jLabel3.setText("Width and Height Setting");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        SET_WIDTH_INPUT.setBackground(new java.awt.Color(27, 38, 44));
        SET_WIDTH_INPUT.setForeground(new java.awt.Color(187, 225, 250));
        SET_WIDTH_INPUT.setText("0");

        jLabel4.setForeground(new java.awt.Color(187, 225, 250));
        jLabel4.setText("Set Height :");

        SET_HEIGHT_INPUT.setBackground(new java.awt.Color(27, 38, 44));
        SET_HEIGHT_INPUT.setForeground(new java.awt.Color(187, 225, 250));
        SET_HEIGHT_INPUT.setText("0");

        RESIZE_ID.setText("ID");

        SAVE_W_H_LABEL.setBackground(new java.awt.Color(27, 38, 44));
        SAVE_W_H_LABEL.setForeground(new java.awt.Color(187, 225, 250));
        SAVE_W_H_LABEL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SAVE_W_H_LABEL.setText("Save");
        SAVE_W_H_LABEL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SAVE_W_H_LABELMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout SETWIDTH_HEIGHT_DIALOGLayout = new javax.swing.GroupLayout(SETWIDTH_HEIGHT_DIALOG);
        SETWIDTH_HEIGHT_DIALOG.setLayout(SETWIDTH_HEIGHT_DIALOGLayout);
        SETWIDTH_HEIGHT_DIALOGLayout.setHorizontalGroup(
            SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(RESIZE_ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
            .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createSequentialGroup()
                .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SET_HEIGHT_INPUT, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(SET_WIDTH_INPUT)))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SAVE_W_H_LABEL, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        SETWIDTH_HEIGHT_DIALOGLayout.setVerticalGroup(
            SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(RESIZE_ID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SET_WIDTH_INPUT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SETWIDTH_HEIGHT_DIALOGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SET_HEIGHT_INPUT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SAVE_W_H_LABEL))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        drop_zone_panel.add(SETWIDTH_HEIGHT_DIALOG);
        SETWIDTH_HEIGHT_DIALOG.setBounds(860, 390, 240, 160);

        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 50));

        EXIT_APP.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        EXIT_APP.setForeground(new java.awt.Color(255, 0, 51));
        EXIT_APP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EXIT_APP.setText("X");
        EXIT_APP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EXIT_APPMouseClicked(evt);
            }
        });

        checkCustomPath.setText("Save File");
        checkCustomPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustomPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkCustomPath, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1004, Short.MAX_VALUE)
                .addComponent(EXIT_APP)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkCustomPath)
                    .addComponent(EXIT_APP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        drop_zone_panel.add(jPanel2);
        jPanel2.setBounds(0, 0, 1200, 50);

        jFileChooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setAcceptAllFileFilterUsed(false);

        javax.swing.GroupLayout Choose_File_PanelLayout = new javax.swing.GroupLayout(Choose_File_Panel);
        Choose_File_Panel.setLayout(Choose_File_PanelLayout);
        Choose_File_PanelLayout.setHorizontalGroup(
            Choose_File_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Choose_File_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addContainerGap())
        );
        Choose_File_PanelLayout.setVerticalGroup(
            Choose_File_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Choose_File_PanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        drop_zone_panel.add(Choose_File_Panel);
        Choose_File_Panel.setBounds(150, 90, 700, 510);

        getContentPane().add(drop_zone_panel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void customInit() {
        SETWIDTH_HEIGHT_DIALOG.setVisible(false);
        Choose_File_Panel.setVisible(false);
    }

    private void drop_zone_panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMousePressed
        System.out.println("Jpanel: MOUSE PRESS");
//        xMouseInDeskTopBackground = evt.getX();
//        yMouseInDeskTopBackground = evt.getY();
    }//GEN-LAST:event_drop_zone_panelMousePressed

    private void drop_zone_panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMouseClicked
        // TODO add your handling code here:
        hideImageOptions();

    }//GEN-LAST:event_drop_zone_panelMouseClicked

    private void drop_zone_panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMouseDragged
//        int x = evt.getXOnScreen();
//        int y = evt.getYOnScreen();
//        x2 = x;
//        y2 = y;
//        this.setLocation(x - xMouseInDeskTopBackground, y - yMouseInDeskTopBackground);
    }//GEN-LAST:event_drop_zone_panelMouseDragged

    private void checkCustomPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustomPathActionPerformed
//        Choose_File_Panel.setVisible(true);

//        chooser = new JFileChooser();
//        chooser.setCurrentDirectory(new java.io.File("."));
//        chooser.setDialogTitle(choosertitle);
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
//        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + jFileChooser1.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + jFileChooser1.getSelectedFile());
            String namaID = "TEST";
            String namaProject = "ICONBOX";
            String fileName = "SampleIcon";
            Export_Script exp = new Export_Script(fileName, namaID, namaProject, jFileChooser1.getSelectedFile());
            exp.CreateDirectory();
            exp.PutFileINIinPROJECT();
            exp.PutFileImageinRes(sum_pictures, List_jlabels_stat, List_jlabels_stat_base);
        } else {
            System.out.println("No Selection ");
        }

    }//GEN-LAST:event_checkCustomPathActionPerformed

    private void Change_Color_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Change_Color_LabelMouseClicked
        hideImageOptions();
        int jlabel_id = Integer.parseInt(Jlabel_OPTIONS_ID.getText());
        jlabels[jlabel_id].getIcon();
        String fileName = "TempImage" + jlabel_id;
        Options_Script ops = new Options_Script();
        try {

            BufferedImage img_input = null;
            BufferedImage img = null;
            img_input = ImageIO.read(new File(path_local + fileName + ".png"));
            img = ops.colorImage(img_input, 255, 0, 0);
            int Scale = 0;
            int Pref_Size = 200;
            if (img.getWidth() > img.getHeight()) {
                Scale = img.getWidth() / Pref_Size;
            } else {
                Scale = img.getHeight() / Pref_Size;
            }
            int img_maxwidth = img.getWidth() / Scale;
            int img_maxheight = img.getHeight() / Scale;
            Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(dimg);
            jlabels[jlabel_id].setIcon(icon);
            drop_zone_panel.validate();
            drop_zone_panel.repaint();
//        CreateLabelWithImage(fileName, jlabel_id);
        } catch (Exception e) {
            System.out.println("ERR: " + e);
        }

    }//GEN-LAST:event_Change_Color_LabelMouseClicked

    private void RESIZE_LABELMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RESIZE_LABELMouseClicked
        IMG_OPTIONS.setVisible(false);
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        int jlabel_id = Integer.parseInt(Jlabel_OPTIONS_ID.getText());
        SETWIDTH_HEIGHT_DIALOG.setVisible(true);
        SETWIDTH_HEIGHT_DIALOG.setLocation(x, y);
        SET_WIDTH_INPUT.setText("" + jlabels[jlabel_id].getWidth());
        SET_HEIGHT_INPUT.setText("" + jlabels[jlabel_id].getHeight());
        RESIZE_ID.setText("" + jlabel_id);
        
    }//GEN-LAST:event_RESIZE_LABELMouseClicked

    private void SAVE_W_H_LABELMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SAVE_W_H_LABELMouseClicked
        SETWIDTH_HEIGHT_DIALOG.setVisible(false);
        int jlabel_id = Integer.parseInt(Jlabel_OPTIONS_ID.getText());
        int newWidth = Integer.parseInt(SET_WIDTH_INPUT.getText());
        int newHeight = Integer.parseInt(SET_HEIGHT_INPUT.getText());
        int X = jlabels[jlabel_id].getX();
        int Y = jlabels[jlabel_id].getY();
        Options_Script opt = new Options_Script();
        Map<String, File> jlabel_file_img = List_jlabels_stat_base.get(jlabel_id);

        String fileName = jlabel_file_img.get("filePath").getPath();

        jlabels[jlabel_id].setBounds(X, Y, newWidth, newHeight);
        jlabels[jlabel_id].setIcon(opt.Update_Label_PROPS(fileName, newWidth, newHeight));

        System.out.println("LISTW1:" + List_jlabels_stat.get(jlabel_id));
        SetXYWH(X, Y, newWidth, newHeight, jlabel_id);
        System.out.println("LISTW2:" + List_jlabels_stat.get(jlabel_id));
        drop_zone_panel.validate();
        drop_zone_panel.repaint();
    }//GEN-LAST:event_SAVE_W_H_LABELMouseClicked

    private void EXIT_APPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EXIT_APPMouseClicked
        int EXIT_RESPONSE = JOptionPane.showConfirmDialog(jPanel1, "Are you sure want to exit app ? ", "Yes, Confirm", JOptionPane.YES_NO_OPTION);
        if (EXIT_RESPONSE == JOptionPane.YES_OPTION) {
            dispose();
            Launcher launcher = new Launcher();
            launcher.setVisible(true);
            launcher.setUndecorated(true);
            launcher.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_EXIT_APPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }
                new Main_Frame().setVisible(true);
            }
        });
    }
// add image with label

    private void onMouseClicked(MouseEvent e) {
        for (int i = 0; i < jlabels.length; i++) {
            if (e.getSource() == jlabels[i]) {
                System.out.println("Label" + i + "was clicked");
            }
        }
    }

    private void hideImageOptions() {
        IMG_OPTIONS.setVisible(false);
        SETWIDTH_HEIGHT_DIALOG.setVisible(false);
        for (int i = 0; i < sum_pictures; i++) {
            Border empty = BorderFactory.createEmptyBorder();
            jlabels[i].setBorder(empty);
        }
    }

    public void AddXYWH(int X, int Y, int W, int H, int id) {
        Map<String, Integer> jlabels_stat = new HashMap<>();
        jlabels_stat.put("X", X);
        jlabels_stat.put("Y", Y);
        jlabels_stat.put("W", W);
        jlabels_stat.put("H", H);
        List_jlabels_stat.add(id, jlabels_stat);
    }

    public void SetXYWH(int X, int Y, int W, int H, int id) {
        Map<String, Integer> jlabels_stat = new HashMap<>();
        System.out.println("Set XY: " + X + " :" + Y);
        jlabels_stat.put("X", X);
        jlabels_stat.put("Y", Y);
        jlabels_stat.put("W", W);
        jlabels_stat.put("H", H);
        List_jlabels_stat.set(id, jlabels_stat);
    }

    public void Set_jlabel_Basic(File filePath, int id) {
        Map<String, File> jlabels_stat = new HashMap<>();
        jlabels_stat.put("filePath", filePath);
        List_jlabels_stat_base.add(id, jlabels_stat);
    }

    public void CreateLabelWithImage(int id) {
        try {
            System.out.println("IM CALLED?");
//            Options_Script ops = new Options_Script();
            BufferedImage img = null;
            Map<String, File> jlabel_file_img = List_jlabels_stat_base.get(id);
            img = ImageIO.read(jlabel_file_img.get("filePath"));
            int Scale = 0;
            int Pref_Size = 200;
            if (img.getWidth() > img.getHeight()) {
                Scale = img.getWidth() / Pref_Size;
            } else {
                Scale = img.getHeight() / Pref_Size;
            }
            int img_maxwidth = img.getWidth() / Scale;
            int img_maxheight = img.getHeight() / Scale;
            Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(dimg);
            jlabels[id] = new JLabel("Label" + sum_pictures);
            jlabels[id].setIcon(icon);
            jlabels[id].setBounds(1, 1 + (sum_pictures * 20), img_maxwidth, img_maxheight);
            this.AddXYWH(jlabels[id].getX(), jlabels[id].getY(), img_maxwidth, img_maxheight, id);
            jlabels[id].setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
            jlabels[id].addMouseMotionListener(new MouseMotionListener() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    int x = e.getXOnScreen();
                    int y = e.getYOnScreen();
                    SetXYWH(jlabels[id].getX(), jlabels[id].getY(), jlabels[id].getWidth(), jlabels[id].getHeight(), id);

                    jlabels[id].setLocation((x - x2) - (xImage_POS - xMouseInDeskTopBackground), (y - y2) - (yImage_POS - yMouseInDeskTopBackground));
                }

                @Override
                public void mouseMoved(MouseEvent e) {
                }
            });
            jlabels[id].addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {

                    Border grayBorder = BorderFactory.createLineBorder(Color.GRAY, 2, true);
                    jlabels[id].setBorder(grayBorder);
                    if (SwingUtilities.isRightMouseButton(e) || e.isControlDown()) {
                        int x = e.getXOnScreen();
                        int y = e.getYOnScreen();
                        IMG_OPTIONS.setLocation(x, y);
                        IMG_OPTIONS.setVisible(true);
                        Jlabel_OPTIONS_ID.setText("" + id);
                        //System.out.println("Right Worked");
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    xImage_POS = e.getX();
                    yImage_POS = e.getY();
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            });
            drop_zone_panel.add(jlabels[id]);
            drop_zone_panel.validate();
            drop_zone_panel.repaint();
        } catch (Exception e) {
        }
    }
// Something Called JPANEL

    public class DropPane extends JPanel {

        private DropTarget dropTarget;
        private DropTargetHandler dropTargetHandler;
        private Point dragPoint;

        private boolean dragOver = false;
        private BufferedImage target;

//        private JLabel message;
        public DropPane() {
            System.out.println("THIS IS PANE");
            try {
                target = ImageIO.read(new File("TestImage.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            setLayout(new GridBagLayout());
//            messageText = new JLabel();
//            messageText.setFont(messageText.getFont().deriveFont(Font.BOLD, 24));
//            add(messageText);

        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(400, 400);
        }

        protected DropTarget getMyDropTarget() {
            if (dropTarget == null) {
                dropTarget = new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, null);
            }
            return dropTarget;
        }

        protected DropTargetHandler getDropTargetHandler() {
            if (dropTargetHandler == null) {
                dropTargetHandler = new DropTargetHandler();
            }
            return dropTargetHandler;
        }

        @Override
        public void addNotify() {
            super.addNotify();
            System.out.println("THIS IS NOTIFY");
            try {
                getMyDropTarget().addDropTargetListener(getDropTargetHandler());
            } catch (TooManyListenersException ex) {
                ex.printStackTrace();
            }
        }

        @Override
        public void removeNotify() {
            super.removeNotify();
            getMyDropTarget().removeDropTargetListener(getDropTargetHandler());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (dragOver) {
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(new Color(0, 255, 0, 64));
                g2d.fill(new Rectangle(getWidth(), getHeight()));
                if (dragPoint != null && target != null) {
                    int x = dragPoint.x - 12;
                    int y = dragPoint.y - 12;
                    g2d.drawImage(target, x, y, this);
                }
                g2d.dispose();
            }
        }

        protected void importFiles(final List files) {
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    String path_local = "src/images/";
                    if (sum_pictures <= 10) {
                        try {
                            Label_Drop_Image.setText(null);
                            System.out.println("Angka: " + sum_pictures);
                            System.out.println("files.size(): " + files.size());
                            if (sum_pictures == 0) {
                                for (int i = 0; i < files.size(); i++) {
//                                    FileOutputStream out = null;
//                                    FileInputStream in = null;
//                                    int cursor;
//                                    String fileName = "TempImage" + i;
//                                    System.out.println("GAMBAR: " + files.get(i));
//                                    in = new FileInputStream((File) files.get(i));
//                                    out = new FileOutputStream(path_local + fileName + ".png");
//                                    String a = String.
//                                    System.out.println("PATH FILES: " + files.get(i));
                                    Set_jlabel_Basic((File) files.get(i), i);
//                                    System.out.println("GAMBAR NEXT: " + fileName);
//                                    while ((cursor = in.read()) != -1) {
//                                        out.write(cursor);
//                                    }
                                    CreateLabelWithImage(i);
                                }
                                sum_pictures = files.size();
                            } else {
                                for (int i = sum_pictures; i < (sum_pictures + files.size()); i++) {
//                                    System.out.println("nilai I: " + i);
//                                    FileOutputStream out = null;
//                                    FileInputStream in = null;
//                                    int cursor;
//                                    String fileName = "TempImage" + i;
//                                    System.out.println("GAMBAR: " + files.get(i - sum_pictures));
//                                    in = new FileInputStream((File) files.get(i - sum_pictures));
//                                    out = new FileOutputStream(path_local + fileName + ".png");
//                                    System.out.println("GAMBAR NEXT: " + fileName);
                                    Set_jlabel_Basic((File) files.get(i - sum_pictures), i);
//                                    while ((cursor = in.read()) != -1) {
//                                        out.write(cursor);
//                                    }
                                    CreateLabelWithImage(i);
                                }
                                sum_pictures += files.size();
                            }

//                        File pathToFile = new File("TestImage.png");
//                        boolean exists = pathToFile.exists();
//                        long fileSize = pathToFile.length();
//
//                        BufferedImage img = null;
//                        img = ImageIO.read(new File(path_local + "TestImage.png"));
//                        int img_maxwidth = img.getWidth() % 400;
//                        int img_maxheight = img.getHeight() % 400;
//                        Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
//                        ImageIcon icon = new ImageIcon(dimg);
//                        Image_1.setIcon(icon);
//                        Image_1.setBounds(0, 0, img_maxwidth, img_maxheight);
//                            FileTitle.setText("You dropped " + files.size());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        alertBox.showMessageDialog(jFrame1, "Maximum 10 image", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
            };
            SwingUtilities.invokeLater(run);
        }

        protected class DropTargetHandler implements DropTargetListener {

            protected void processDrag(DropTargetDragEvent dtde) {
                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrag(DnDConstants.ACTION_COPY);
                } else {
                    dtde.rejectDrag();
                }
            }

            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
                SwingUtilities.invokeLater(new DragUpdate(false, null));
                repaint();
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                String file_address = "/file/id/namaProject/@Resources";
                Path path = Paths.get(file_address);
                System.out.println("THIS IS DROP");

                SwingUtilities.invokeLater(new DragUpdate(false, null));

                Transferable transferable = dtde.getTransferable();

                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrop(dtde.getDropAction());
                    try {
                        List transferData = (List) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        jLabel1.setIcon(new ImageIcon(transferData.get(0)));
                        importFiles(transferData);
                        dtde.dropComplete(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
//                        System.out.println("THIS IS DROP IMAGE");
//                        try {
//                            Image image = (Image) dtd
//                        DataFlavor.imageFlavor
//                            );
//                        jLabel1.setIcon(new ImageIcon(image));
//                        } catch (UnsupportedFlavorException | IOException e) {
//                            e.printStackTrace();
//                        }
//                    }

//                    try {
////                        if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
////                            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
////                            BufferedImage img = (BufferedImage) cb.getData(DataFlavor.imageFlavor);
////                            System.out.println("FILE IMAGE");
////                            File file = new File("newimage.png");
////                            ImageIO.write(img, "png", file);
////                        }
//                        List<File> transferData = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        if (transferData != null && transferData.size() > 0) {
//                            System.out.println("FILE IMAGE" + transferData.get(0));
//                            File f = transferData.get(0);
//                            ImageIcon iIcon = new ImageIcon(f.getAbsolutePath());
//                            image = iIcon.getImage();
//                            jLabel1.setIcon(iIcon);
////                            System.out.println("FILE IMAGEA");
////                            FileOutputStream fout = new FileOutputStream("gambar1.png");
////                            fout.write(data);
////                            fout.close();
////                            input.close();
////                            BufferedImage img = ;
////                            File source = new File(transferData.get(0));
////                            File dest = new File(file_address);
////                            FileUtils.copyDirectory(source, dest);
//
//                            importFiles(transferData);
//                            dtde.dropComplete(true);
//                        }
//
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
//                    }
                } else {
                    dtde.rejectDrop();
                }
            }
        }

        public class DragUpdate implements Runnable {

            private boolean dragOver;
            private Point dragPoint;

            public DragUpdate(boolean dragOver, Point dragPoint) {
                this.dragOver = dragOver;
                this.dragPoint = dragPoint;
            }

            @Override
            public void run() {
                DropPane.this.dragOver = dragOver;
                DropPane.this.dragPoint = dragPoint;
                DropPane.this.repaint();
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Change_Color_Label;
    private javax.swing.JPanel Choose_File_Panel;
    private javax.swing.JLabel EXIT_APP;
    private javax.swing.JPanel IMG_OPTIONS;
    private javax.swing.JLabel Jlabel_OPTIONS_ID;
    private javax.swing.JLabel Label_Drop_Image;
    private javax.swing.JLabel RESIZE_ID;
    private javax.swing.JLabel RESIZE_LABEL;
    private javax.swing.JLabel SAVE_W_H_LABEL;
    private javax.swing.JPanel SETWIDTH_HEIGHT_DIALOG;
    private javax.swing.JTextField SET_HEIGHT_INPUT;
    private javax.swing.JTextField SET_WIDTH_INPUT;
    private javax.swing.JToggleButton checkCustomPath;
    private javax.swing.JPanel drop_zone_panel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
