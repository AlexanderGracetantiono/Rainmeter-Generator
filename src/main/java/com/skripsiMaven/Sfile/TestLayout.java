/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.skripsiMaven.Sfile;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TooManyListenersException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;

/**
 *
 * @author alexa
 */
public class TestLayout extends javax.swing.JFrame {

    private int sum_pictures = 0;
    int xMouseInDeskTopBackground;
    int yMouseInDeskTopBackground;
    int x2;
    int y2;

    int xImage_POS;
    int yImage_POS;

    double Coor_ScaleX = 1.55;
    double Coor_ScaleY = 3.65;
    private String path_local = "src/images/";
    JLabel jlabels[] = new JLabel[10];
    String[] jlabels_coordinat = new String[10];

    List<Map<String, Integer>> List_jlabels_stat = new ArrayList<Map<String, Integer>>();
//    String[] jlabels_stat = new String[10];
    JOptionPane alertBox = new JOptionPane();

    /**
     * Creates new form TestLayout
     */
    public TestLayout() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        drop_zone_panel = new DropPane();
        Image_1 = new javax.swing.JLabel();
        Label_Drop_Image = new javax.swing.JLabel();
        IMG_OPTIONS = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        checkCustomPath = new javax.swing.JToggleButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1200, 800));
        setMinimumSize(new java.awt.Dimension(1200, 800));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        drop_zone_panel.setBackground(new java.awt.Color(204, 204, 204));
        drop_zone_panel.setMaximumSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.setMinimumSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.setPreferredSize(new java.awt.Dimension(1200, 800));
        drop_zone_panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drop_zone_panelMouseDragged(evt);
            }
        });
        drop_zone_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drop_zone_panelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drop_zone_panelMousePressed(evt);
            }
        });
        drop_zone_panel.setLayout(null);

        Image_1.setBackground(new java.awt.Color(102, 102, 255));
        Image_1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Image_1.setForeground(new java.awt.Color(0, 0, 0));
        Image_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Image_1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        Image_1.setMaximumSize(new java.awt.Dimension(400, 400));
        Image_1.setMinimumSize(new java.awt.Dimension(50, 50));
        Image_1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Image_1MouseDragged(evt);
            }
        });
        Image_1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Image_1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Image_1MousePressed(evt);
            }
        });
        Image_1.setBounds(10, 90, 40, 50);
        drop_zone_panel.add(Image_1);
        Image_1.setBounds(1000, 580, 140, 110);

        Label_Drop_Image.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        Label_Drop_Image.setForeground(new java.awt.Color(0, 0, 0));
        Label_Drop_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Drop_Image.setText("Drop an Image");
        drop_zone_panel.add(Label_Drop_Image);
        Label_Drop_Image.setBounds(360, 400, 460, 60);

        IMG_OPTIONS.setMaximumSize(new java.awt.Dimension(120, 140));

        jLabel1.setText("Resize");

        javax.swing.GroupLayout IMG_OPTIONSLayout = new javax.swing.GroupLayout(IMG_OPTIONS);
        IMG_OPTIONS.setLayout(IMG_OPTIONSLayout);
        IMG_OPTIONSLayout.setHorizontalGroup(
            IMG_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IMG_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        IMG_OPTIONSLayout.setVerticalGroup(
            IMG_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IMG_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        drop_zone_panel.add(IMG_OPTIONS);
        IMG_OPTIONS.setBounds(960, 20, 120, 140);
        IMG_OPTIONS.setVisible(false);

        checkCustomPath.setText("Convert");
        checkCustomPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustomPathActionPerformed(evt);
            }
        });
        drop_zone_panel.add(checkCustomPath);
        checkCustomPath.setBounds(0, 10, 74, 32);

        getContentPane().add(drop_zone_panel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drop_zone_panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMousePressed
        System.out.println("Jpanel: MOUSE PRESS");
        xMouseInDeskTopBackground = evt.getX();
        yMouseInDeskTopBackground = evt.getY();
    }//GEN-LAST:event_drop_zone_panelMousePressed

    private void drop_zone_panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMouseClicked
        // TODO add your handling code here:
        IMG_OPTIONS.setVisible(false);
        for (int i = 0; i < sum_pictures; i++) {
            Border empty = BorderFactory.createEmptyBorder();
            jlabels[i].setBorder(empty);
        }
    }//GEN-LAST:event_drop_zone_panelMouseClicked

    private void drop_zone_panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drop_zone_panelMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        x2 = x;
        y2 = y;
        this.setLocation(x - xMouseInDeskTopBackground, y - yMouseInDeskTopBackground);
    }//GEN-LAST:event_drop_zone_panelMouseDragged

    private void checkCustomPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustomPathActionPerformed
        String namaID = "TEST";
        String namaProject = "ICONBOX";
        String fileName = "SampleIcon";
        ExportIniFiles exp = new ExportIniFiles(fileName, namaID, namaProject);
        exp.CreateDirectory();
        exp.PutFileINIinPROJECT();
        //        exp.ExportA();
        exp.PutFileImageinRes(sum_pictures, List_jlabels_stat);
    }//GEN-LAST:event_checkCustomPathActionPerformed

    private void Image_1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MousePressed
        //        Image_label.setVisible(true);
        xImage_POS = evt.getX();
        yImage_POS = evt.getY();
    }//GEN-LAST:event_Image_1MousePressed

    private void Image_1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MouseClicked
        //       Border grayBorder = BorderFactory.createLineBorder(Color.GRAY, 2, true);
        //        Image_label.setBorder(grayBorder);
        //        Image_label.setVisible(true);
        System.out.println("Clicked");
    }//GEN-LAST:event_Image_1MouseClicked

    private void Image_1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
//        Image_1.setLocation((int) ((x - x2 - (Image_1.getWidth() / 2)) - (xMouse2 - xMouseInDeskTopBackground)), (int) ((y - y2 - (Image_1.getHeight() / 2)) - (yMouse2 - yMouseInDeskTopBackground)));
//        System.out.println("DRAGImage: " + x + " y: " + y);
//        System.out.println("DRAGx2: " + xMouse2 + " y: " + yMouse2);
//        System.out.println("DRAGDeskTopBG: " + xMouseInDeskTopBackground + " y: " + yMouseInDeskTopBackground);
        //        Image_label.setVisible(true);
    }//GEN-LAST:event_Image_1MouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }
                new TestLayout().setVisible(true);
            }
        });
    }
// add image with label

    private void onMouseClicked(MouseEvent e) {
        for (int i = 0; i < jlabels.length; i++) {
            if (e.getSource() == jlabels[i]) {
                System.out.println("Label" + i + "was clicked");
            }
        }
    }

    public void AddXYWH(int X, int Y, int W, int H, int id) {
        Map<String, Integer> jlabels_stat = new HashMap<>();
        jlabels_stat.put("X", X);
        jlabels_stat.put("Y", Y);
        jlabels_stat.put("W", W);
        jlabels_stat.put("H", H);
        List_jlabels_stat.add(id, jlabels_stat);
    }

    public void SetXYWH(int X, int Y, int W, int H, int id) {
        Map<String, Integer> jlabels_stat = new HashMap<>();
        System.out.println("Set XY: " + X + " :" + Y);
        jlabels_stat.put("X", X);
        jlabels_stat.put("Y", Y);
        jlabels_stat.put("W", W);
        jlabels_stat.put("H", H);
        List_jlabels_stat.set(id, jlabels_stat);
    }

    public void CreateLabelWithImage(String fileName, int id) {
        try {
            System.out.println("IM CALLED?");
            BufferedImage img = null;
            img = ImageIO.read(new File(path_local + fileName + ".png"));
            int Scale = 0;
            int Pref_Size = 200;
            if (img.getWidth() > img.getHeight()) {
                Scale = img.getWidth() / Pref_Size;
            } else {
                Scale = img.getHeight() / Pref_Size;
            }
            int img_maxwidth = img.getWidth() / Scale;
            int img_maxheight = img.getHeight() / Scale;
            Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(dimg);
            jlabels[id] = new JLabel("Label" + sum_pictures);
            jlabels[id].setIcon(icon);
            jlabels[id].setBounds(1, 1 + (sum_pictures * 20), img_maxwidth, img_maxheight);
            this.AddXYWH(jlabels[id].getX(), jlabels[id].getY(), img_maxwidth, img_maxheight, id);
//            jlabels_coordinat[id] = jlabels[id].getX() + "," + jlabels[id].getY();
            jlabels[id].setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
            jlabels[id].addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    onMouseClicked(e);
                }
            });
            jlabels[id].addMouseMotionListener(new MouseMotionListener() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    int x = e.getXOnScreen();
                    int y = e.getYOnScreen();
//                    jlabels[id].setLocation(x-xMouse2,y-yMouse2);
//                    jlabels[id].setLocation((int) ((x - x2 - (jlabels[id].getWidth() / 2))), (int) ((y - y2 - (jlabels[id].getHeight() / 2))));
//                    System.out.println("X: " + (int) (x - (jlabels[id].getWidth())));
//                    System.out.println("Y: " + (int) (y - y2 - yMouse2 + yMouseInDeskTopBackground - (jlabels[id].getHeight() / 2)));
//                    System.out.println("XIMAGE:" + jlabels[id].getX());
//                    System.out.println("x: " + x + " ,x2: " + x2 + " ,xmouse: " + xMouse2 + " ,xmouseDesktop: " + xMouseInDeskTopBackground + " ,Jlabels: " + jlabels[id].getWidth());
//                    jlabels_coordinat[id] = jlabels[id].getX() + "," + jlabels[id].getY();
                    SetXYWH(jlabels[id].getX(), jlabels[id].getY(), img_maxwidth, img_maxheight, id);
                    jlabels[id].setLocation((x - x2) - (xImage_POS - xMouseInDeskTopBackground), (y - y2) - (yImage_POS - yMouseInDeskTopBackground));
//                    jlabels[id].setLocation(x-jlabels[id].getWidth() -xMouse2 ,y-jlabels[id].getHeight() -yMouse2);
//                    jlabels[id].setLocation((int) (x - x2 - xMouse2 + xMouseInDeskTopBackground - (jlabels[id].getWidth())), (int) ((y - y2 - (jlabels[id].getHeight())) - (yMouse2 + yMouseInDeskTopBackground)));
                }

                @Override
                public void mouseMoved(MouseEvent e) {
                }
            });
            jlabels[id].addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {

                    Border grayBorder = BorderFactory.createLineBorder(Color.GRAY, 2, true);
                    jlabels[id].setBorder(grayBorder);
                    if (SwingUtilities.isRightMouseButton(e) || e.isControlDown()) {
                        int x = e.getX();
                        int y = e.getY();
                        IMG_OPTIONS.setLocation(x, y);
                        IMG_OPTIONS.setVisible(true);

                        //System.out.println("Right Worked");
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    xImage_POS = e.getX();
                    yImage_POS = e.getY();
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            });
            drop_zone_panel.add(jlabels[id]);
            drop_zone_panel.validate();
            drop_zone_panel.repaint();
        } catch (Exception e) {
        }
    }
// Something Called JPANEL

    public class DropPane extends JPanel {

        private DropTarget dropTarget;
        private DropTargetHandler dropTargetHandler;
        private Point dragPoint;

        private boolean dragOver = false;
        private BufferedImage target;

//        private JLabel message;
        public DropPane() {
            System.out.println("THIS IS PANE");
            try {
                target = ImageIO.read(new File("TestImage.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            setLayout(new GridBagLayout());
//            messageText = new JLabel();
//            messageText.setFont(messageText.getFont().deriveFont(Font.BOLD, 24));
//            add(messageText);

        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(400, 400);
        }

        protected DropTarget getMyDropTarget() {
            if (dropTarget == null) {
                dropTarget = new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, null);
            }
            return dropTarget;
        }

        protected DropTargetHandler getDropTargetHandler() {
            if (dropTargetHandler == null) {
                dropTargetHandler = new DropTargetHandler();
            }
            return dropTargetHandler;
        }

        @Override
        public void addNotify() {
            super.addNotify();
            System.out.println("THIS IS NOTIFY");
            try {
                getMyDropTarget().addDropTargetListener(getDropTargetHandler());
            } catch (TooManyListenersException ex) {
                ex.printStackTrace();
            }
        }

        @Override
        public void removeNotify() {
            super.removeNotify();
            getMyDropTarget().removeDropTargetListener(getDropTargetHandler());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (dragOver) {
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(new Color(0, 255, 0, 64));
                g2d.fill(new Rectangle(getWidth(), getHeight()));
                if (dragPoint != null && target != null) {
                    int x = dragPoint.x - 12;
                    int y = dragPoint.y - 12;
                    g2d.drawImage(target, x, y, this);
                }
                g2d.dispose();
            }
        }

        protected void importFiles(final List files) {
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    String path_local = "src/images/";
                    if (sum_pictures <= 10) {
                        try {
                            Label_Drop_Image.setText(null);
                            System.out.println("Angka: " + sum_pictures);
                            System.out.println("files.size(): " + files.size());
                            if (sum_pictures == 0) {
                                for (int i = 0; i < files.size(); i++) {
                                    FileOutputStream out = null;
                                    FileInputStream in = null;
                                    int cursor;
                                    String fileName = "TempImage" + i;
                                    System.out.println("GAMBAR: " + files.get(i));
                                    in = new FileInputStream((File) files.get(i));
                                    out = new FileOutputStream(path_local + fileName + ".png");
                                    System.out.println("GAMBAR NEXT: " + fileName);
                                    while ((cursor = in.read()) != -1) {
                                        out.write(cursor);
                                    }
                                    CreateLabelWithImage(fileName, i);
                                }
                                sum_pictures = files.size();
                            } else {
                                for (int i = sum_pictures; i < (sum_pictures + files.size()); i++) {
                                    System.out.println("nilai I: " + i);
                                    FileOutputStream out = null;
                                    FileInputStream in = null;
                                    int cursor;
                                    String fileName = "TempImage" + i;
                                    System.out.println("GAMBAR: " + files.get(i - sum_pictures));
                                    in = new FileInputStream((File) files.get(i - sum_pictures));
                                    out = new FileOutputStream(path_local + fileName + ".png");
                                    System.out.println("GAMBAR NEXT: " + fileName);
                                    while ((cursor = in.read()) != -1) {
                                        out.write(cursor);
                                    }
                                    CreateLabelWithImage(fileName, i);
                                }
                                sum_pictures += files.size();
                            }

//                        File pathToFile = new File("TestImage.png");
//                        boolean exists = pathToFile.exists();
//                        long fileSize = pathToFile.length();
//
//                        BufferedImage img = null;
//                        img = ImageIO.read(new File(path_local + "TestImage.png"));
//                        int img_maxwidth = img.getWidth() % 400;
//                        int img_maxheight = img.getHeight() % 400;
//                        Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
//                        ImageIcon icon = new ImageIcon(dimg);
//                        Image_1.setIcon(icon);
//                        Image_1.setBounds(0, 0, img_maxwidth, img_maxheight);
//                            FileTitle.setText("You dropped " + files.size());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        alertBox.showMessageDialog(jFrame1, "Maximum 10 image", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                }
            };
            SwingUtilities.invokeLater(run);
        }

        protected class DropTargetHandler implements DropTargetListener {

            protected void processDrag(DropTargetDragEvent dtde) {
                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrag(DnDConstants.ACTION_COPY);
                } else {
                    dtde.rejectDrag();
                }
            }

            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
                SwingUtilities.invokeLater(new DragUpdate(false, null));
                repaint();
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                String file_address = "/file/id/namaProject/@Resources";
                Path path = Paths.get(file_address);
                System.out.println("THIS IS DROP");

                SwingUtilities.invokeLater(new DragUpdate(false, null));

                Transferable transferable = dtde.getTransferable();

                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrop(dtde.getDropAction());
                    try {

                        List transferData = (List) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        jLabel1.setIcon(new ImageIcon(transferData.get(0)));
                        importFiles(transferData);
                        dtde.dropComplete(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
//                        System.out.println("THIS IS DROP IMAGE");
//                        try {
//                            Image image = (Image) dtd
//                        DataFlavor.imageFlavor
//                            );
//                        jLabel1.setIcon(new ImageIcon(image));
//                        } catch (UnsupportedFlavorException | IOException e) {
//                            e.printStackTrace();
//                        }
//                    }

//                    try {
////                        if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
////                            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
////                            BufferedImage img = (BufferedImage) cb.getData(DataFlavor.imageFlavor);
////                            System.out.println("FILE IMAGE");
////                            File file = new File("newimage.png");
////                            ImageIO.write(img, "png", file);
////                        }
//                        List<File> transferData = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        if (transferData != null && transferData.size() > 0) {
//                            System.out.println("FILE IMAGE" + transferData.get(0));
//                            File f = transferData.get(0);
//                            ImageIcon iIcon = new ImageIcon(f.getAbsolutePath());
//                            image = iIcon.getImage();
//                            jLabel1.setIcon(iIcon);
////                            System.out.println("FILE IMAGEA");
////                            FileOutputStream fout = new FileOutputStream("gambar1.png");
////                            fout.write(data);
////                            fout.close();
////                            input.close();
////                            BufferedImage img = ;
////                            File source = new File(transferData.get(0));
////                            File dest = new File(file_address);
////                            FileUtils.copyDirectory(source, dest);
//
//                            importFiles(transferData);
//                            dtde.dropComplete(true);
//                        }
//
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
//                    }
                } else {
                    dtde.rejectDrop();
                }
            }
        }

        public class DragUpdate implements Runnable {

            private boolean dragOver;
            private Point dragPoint;

            public DragUpdate(boolean dragOver, Point dragPoint) {
                this.dragOver = dragOver;
                this.dragPoint = dragPoint;
            }

            @Override
            public void run() {
                DropPane.this.dragOver = dragOver;
                DropPane.this.dragPoint = dragPoint;
                DropPane.this.repaint();
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IMG_OPTIONS;
    private javax.swing.JLabel Image_1;
    private javax.swing.JLabel Label_Drop_Image;
    private javax.swing.JToggleButton checkCustomPath;
    private javax.swing.JPanel drop_zone_panel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
