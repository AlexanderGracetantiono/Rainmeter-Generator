/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.skripsiMaven.Sfile;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.TooManyListenersException;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;

/**
 *
 * @author alexa
 */
public class TestLayout extends javax.swing.JFrame {

    public int angka = 0;
    int xMouseInDeskTopBackground;
    int yMouseInDeskTopBackground;
    int x2;
    int y2;

    int xMouse1;
    int yMouse1;
    int xMouse2;
    int yMouse2;
    double Coor_ScaleX = 1.55;
    double Coor_ScaleY = 3.65;

    /**
     * Creates new form TestLayout
     */
    public TestLayout() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new DropPane();
        Image_1 = new javax.swing.JLabel();
        Label_Drop_Image = new javax.swing.JLabel();
        checkCustomPath = new javax.swing.JToggleButton();
        custom_path = new javax.swing.JTextField();
        custom_path_res = new javax.swing.JLabel();
        FileTitle = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMaximumSize(new java.awt.Dimension(1245, 750));
        jPanel2.setMinimumSize(new java.awt.Dimension(1245, 750));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });
        jPanel2.setLayout(null);

        Image_1.setBackground(new java.awt.Color(102, 102, 255));
        Image_1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Image_1.setForeground(new java.awt.Color(0, 0, 0));
        Image_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Image_1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        Image_1.setMaximumSize(new java.awt.Dimension(400, 400));
        Image_1.setMinimumSize(new java.awt.Dimension(50, 50));
        Image_1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Image_1MouseDragged(evt);
            }
        });
        Image_1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Image_1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Image_1MousePressed(evt);
            }
        });
        Image_1.setBounds(10, 90, 40, 50);
        jPanel2.add(Image_1);
        Image_1.setBounds(20, 30, 140, 110);

        Label_Drop_Image.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        Label_Drop_Image.setForeground(new java.awt.Color(0, 0, 0));
        Label_Drop_Image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Label_Drop_Image.setText("Drop an Image");
        jPanel2.add(Label_Drop_Image);
        Label_Drop_Image.setBounds(370, 450, 460, 60);

        checkCustomPath.setText("Convert");
        checkCustomPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCustomPathActionPerformed(evt);
            }
        });

        custom_path.setText("custom_path....");

        custom_path_res.setText("RES");

        FileTitle.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(checkCustomPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(custom_path, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(custom_path_res, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                        .addComponent(FileTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkCustomPath)
                            .addComponent(custom_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(custom_path_res, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(FileTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkCustomPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCustomPathActionPerformed
        String namaID = "TEST";
        String namaProject = "ICONBOX";
        String fileName = "SampleIcon";
        ExportIniFiles exp = new ExportIniFiles();
        exp.CreateDirectory(namaID, namaProject);
//        exp.ExportA();
        exp.PutFileImageinRes(namaID);
        exp.PutFileINIinPROJECT(namaID, namaProject,fileName);
        
    }//GEN-LAST:event_checkCustomPathActionPerformed

    private void Image_1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MouseClicked
//       Border grayBorder = BorderFactory.createLineBorder(Color.GRAY, 2, true);
//        Image_label.setBorder(grayBorder);
//        Image_label.setVisible(true);
        System.out.println("Clicked");
    }//GEN-LAST:event_Image_1MouseClicked

    private void Image_1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        Image_1.setLocation((int) ((x - x2 - (Image_1.getWidth() / 2)) - (xMouse2 - xMouseInDeskTopBackground)), (int) ((y - y2 - (Image_1.getHeight() / 2)) - (yMouse2 - yMouseInDeskTopBackground)));
        System.out.println("DRAGImage: " + x + " y: " + y);
        System.out.println("DRAGx2: " + xMouse2 + " y: " + yMouse2);
        System.out.println("DRAGDeskTopBG: " + xMouseInDeskTopBackground + " y: " + yMouseInDeskTopBackground);
//        Image_label.setVisible(true);
    }//GEN-LAST:event_Image_1MouseDragged

    private void Image_1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Image_1MousePressed
//        Image_label.setVisible(true);
        xMouse2 = evt.getX();
        yMouse2 = evt.getY();

    }//GEN-LAST:event_Image_1MousePressed

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        x2 = x;
        y2 = y;
        this.setLocation(x - xMouseInDeskTopBackground, y - yMouseInDeskTopBackground);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        xMouseInDeskTopBackground = evt.getX();
        yMouseInDeskTopBackground = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLayout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }
                new TestLayout().setVisible(true);
            }
        });
    }

// Something Called JPANEL
    public class DropPane extends JPanel {

        private DropTarget dropTarget;
        private DropTargetHandler dropTargetHandler;
        private Point dragPoint;

        private boolean dragOver = false;
        private BufferedImage target;

//        private JLabel message;
        public DropPane() {
            System.out.println("THIS IS PANE");
            try {
                target = ImageIO.read(new File("TestImage.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            setLayout(new GridBagLayout());
//            messageText = new JLabel();
//            messageText.setFont(messageText.getFont().deriveFont(Font.BOLD, 24));
//            add(messageText);

        }

        @Override
        public Dimension getPreferredSize() {
            return new Dimension(400, 400);
        }

        protected DropTarget getMyDropTarget() {
            if (dropTarget == null) {
                dropTarget = new DropTarget(this, DnDConstants.ACTION_COPY_OR_MOVE, null);
            }
            return dropTarget;
        }

        protected DropTargetHandler getDropTargetHandler() {
            if (dropTargetHandler == null) {
                dropTargetHandler = new DropTargetHandler();
            }
            return dropTargetHandler;
        }

        @Override
        public void addNotify() {
            super.addNotify();
            System.out.println("THIS IS NOTIFY");
            try {
                getMyDropTarget().addDropTargetListener(getDropTargetHandler());
            } catch (TooManyListenersException ex) {
                ex.printStackTrace();
            }
        }

        @Override
        public void removeNotify() {
            super.removeNotify();
            getMyDropTarget().removeDropTargetListener(getDropTargetHandler());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (dragOver) {
                Graphics2D g2d = (Graphics2D) g.create();
                g2d.setColor(new Color(0, 255, 0, 64));
                g2d.fill(new Rectangle(getWidth(), getHeight()));
                if (dragPoint != null && target != null) {
                    int x = dragPoint.x - 12;
                    int y = dragPoint.y - 12;
                    g2d.drawImage(target, x, y, this);
                }
                g2d.dispose();
            }
        }

        protected void importFiles(final List files) {
            Runnable run = new Runnable() {
                @Override
                public void run() {
                    String path_local = "src/images/";
                    try {
                        Label_Drop_Image.setText(null);
                        FileOutputStream out = null;
                        FileInputStream in = null;
                        int cursor;
                        in = new FileInputStream((File) files.get(0));
                        out = new FileOutputStream(path_local + "TestImage.png");
                        while ((cursor = in.read()) != -1) {
                            out.write(cursor);
                        }

                        File pathToFile = new File("TestImage.png");
                        boolean exists = pathToFile.exists();
                        long fileSize = pathToFile.length();

                        BufferedImage img = null;
                        img = ImageIO.read(new File(path_local + "TestImage.png"));
                        int img_maxwidth = img.getWidth() % 400;
                        int img_maxheight = img.getHeight() % 400;
                        Image dimg = img.getScaledInstance(img_maxwidth, img_maxheight, Image.SCALE_SMOOTH);
                        ImageIcon icon = new ImageIcon(dimg);
                        Image_1.setIcon(icon);
                        Image_1.setBounds(0, 0, img_maxwidth, img_maxheight);
                        FileTitle.setText("You dropped " + files.size() + " files, SIze: " + fileSize + " EXSIST: " + exists);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            };
            SwingUtilities.invokeLater(run);
        }

        protected class DropTargetHandler implements DropTargetListener {

            protected void processDrag(DropTargetDragEvent dtde) {
                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrag(DnDConstants.ACTION_COPY);
                } else {
                    dtde.rejectDrag();
                }
            }

            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
                processDrag(dtde);
                SwingUtilities.invokeLater(new DragUpdate(true, dtde.getLocation()));
                repaint();
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
                SwingUtilities.invokeLater(new DragUpdate(false, null));
                repaint();
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                String file_address = "/file/id/namaProject/@Resources";
                Path path = Paths.get(file_address);
                System.out.println("THIS IS DROP");

                SwingUtilities.invokeLater(new DragUpdate(false, null));

                Transferable transferable = dtde.getTransferable();

                if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    dtde.acceptDrop(dtde.getDropAction());
                    try {

                        List transferData = (List) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        jLabel1.setIcon(new ImageIcon(transferData.get(0)));
                        importFiles(transferData);
                        dtde.dropComplete(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
//                    if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
//                        System.out.println("THIS IS DROP IMAGE");
//                        try {
//                            Image image = (Image) dtd
//                        DataFlavor.imageFlavor
//                            );
//                        jLabel1.setIcon(new ImageIcon(image));
//                        } catch (UnsupportedFlavorException | IOException e) {
//                            e.printStackTrace();
//                        }
//                    }

//                    try {
////                        if (transferable.isDataFlavorSupported(DataFlavor.imageFlavor)) {
////                            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
////                            BufferedImage img = (BufferedImage) cb.getData(DataFlavor.imageFlavor);
////                            System.out.println("FILE IMAGE");
////                            File file = new File("newimage.png");
////                            ImageIO.write(img, "png", file);
////                        }
//                        List<File> transferData = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
//                        if (transferData != null && transferData.size() > 0) {
//                            System.out.println("FILE IMAGE" + transferData.get(0));
//                            File f = transferData.get(0);
//                            ImageIcon iIcon = new ImageIcon(f.getAbsolutePath());
//                            image = iIcon.getImage();
//                            jLabel1.setIcon(iIcon);
////                            System.out.println("FILE IMAGEA");
////                            FileOutputStream fout = new FileOutputStream("gambar1.png");
////                            fout.write(data);
////                            fout.close();
////                            input.close();
////                            BufferedImage img = ;
////                            File source = new File(transferData.get(0));
////                            File dest = new File(file_address);
////                            FileUtils.copyDirectory(source, dest);
//
//                            importFiles(transferData);
//                            dtde.dropComplete(true);
//                        }
//
//                    } catch (Exception ex) {
//                        ex.printStackTrace();
//                    }
                } else {
                    dtde.rejectDrop();
                }
            }
        }

        public class DragUpdate implements Runnable {

            private boolean dragOver;
            private Point dragPoint;

            public DragUpdate(boolean dragOver, Point dragPoint) {
                this.dragOver = dragOver;
                this.dragPoint = dragPoint;
            }

            @Override
            public void run() {
                DropPane.this.dragOver = dragOver;
                DropPane.this.dragPoint = dragPoint;
                DropPane.this.repaint();
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FileTitle;
    private javax.swing.JLabel Image_1;
    private javax.swing.JLabel Label_Drop_Image;
    private javax.swing.JToggleButton checkCustomPath;
    private javax.swing.JTextField custom_path;
    private javax.swing.JLabel custom_path_res;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
